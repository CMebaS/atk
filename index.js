var commandNames = [];

const games = {

  //////////
  // FUEL //
  //////////

  "fuel": () => {
    const fuelModule = Process.enumerateModules()[0];
    Memory.protect(fuelModule.base, fuelModule.size, "rwx");
    var isDemo = false;
    
    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "a1 ?? ?? ?? ?? d9 05 ?? ?? 9d 00 6a 00 d9 1d ?? ?? a7 00 68 ?? ?? 9c 00 50 c6 05 ?? ?? a7 00 00 e8 3a 13 01 00 83 05 ?? ?? a7 00 01 80 3d 79 ?? a6 00 00 75 f7 e8 85 f9 ff ff e8 ?? 71 19 00 84 c0";
    var nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(1).readPointer();
    } else {
      nppGlobalCommandStatePattern = "e0 54 a7 00 68 c0 dc 81 00 52 bf e4 13 9d 00 e8 98 c0 e7 ff e8 73 ae e6 ff 88 44 24 0f 6a 00 68 60 62 9f 00 6a 08 6a 3b ff d6 6a 00 68 68 62 9f 00 6a 08 6a 35 ff d6 6a 00 68 70 62 9f 00 6a 18";
      nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
      if (nppGlobalCommandStateScanResults.length != 0) {
        nppGlobalCommandState = new NativePointer('0x00a754e0');
        isDemo = true;
      } else {
        console.log("Could not locate the nppGlobalCommandState. Aborting...");
        return;
      }
    }
    // 0x00a7c080 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x80, 0xc0, 0xa7, 0x00, 0xd9, 0x05, 0x18, 0xc0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x68, 0xd3, 0xa7, 0x00, 0x68, 0x78,
    //   0x81, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x70, 0xd3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x60, 0xd3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x58, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xb0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a7e088 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x88, 0xe0, 0xa7, 0x00, 0xd9, 0x05, 0xa8, 0xe0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x70, 0xf3, 0xa7, 0x00, 0x68, 0x08,
    //   0xa2, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x78, 0xf3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x68, 0xf3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x78, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xc0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a754e0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xe0, 0x54, 0xa7, 0x00, 0x68, 0xc0, 0xdc, 0x81, 0x00, 0x52,
    //   0xbf, 0xe4, 0x13, 0x9d, 0x00, 0xe8, 0x98, 0xc0, 0xe7, 0xff,
    //   0xe8, 0x73, 0xae, 0xe6, 0xff, 0x88, 0x44, 0x24, 0x0f, 0x6a,
    //   0x00, 0x68, 0x60, 0x62, 0x9f, 0x00, 0x6a, 0x08, 0x6a, 0x3b,
    //   0xff, 0xd6, 0x6a, 0x00, 0x68, 0x68, 0x62, 0x9f, 0x00, 0x6a,
    //   0x08, 0x6a, 0x35, 0xff, 0xd6, 0x6a, 0x00, 0x68, 0x70, 0x62,
    //   0x9f, 0x00, 0x6a, 0x18
    // };

    var nfRunCommand;
    var nfRunCommandPattern = "b8 0c 80 00 00 e8 ?? ?? 21 00 8b 94 24 14 80 00 00 53 56 57 8b bc 24 1c 80 00 00 8d 44 24 18 b9 1f 00 00 00 33 db 88 18 05 00 04 00 00 83 e9 01 79 f4 8b c2 8d 70 01 8a 08 83 c0 01 84 c9 75 f7";
    var nfRunCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else if (isDemo) {
      nfRunCommand = new NativeFunction(new NativePointer('0x0069b7a0'), "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x0069a590 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x56, 0xd8, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7e0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x06, 0xd9, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7a0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x0f, 0x22, 0xdf, 0x83, 0xa4, 0xfa, 0x82, 0x85, 0x39, 0x55,
    //   0x4e, 0xe2, 0xb7, 0x56, 0x1d, 0xd5, 0xf4, 0x64, 0x2a, 0x34,
    //   0xc6, 0x29, 0x1f, 0x05, 0x80, 0xaa, 0x09, 0x1c, 0xf8, 0x13,
    //   0x16, 0xb5, 0x9d, 0x1f, 0x36, 0xba, 0x8a, 0xc1, 0x1e, 0x6b,
    //   0x21, 0x1b, 0xe1, 0x12, 0xa2, 0x77, 0x48, 0x1c, 0x78, 0x35,
    //   0xfa, 0xf7, 0xf2, 0xd7, 0xfb, 0x42, 0x6c, 0x35, 0x14, 0xdb,
    //   0x84, 0xb9, 0x40, 0x6b
    // };

    var npRegisterCommand;
    var npRegisterCommandPattern = "83 ec 10 53 55 6a 10 e8 ?? ?? 21 00 33 db 83 c4 04 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08 8b e8 eb 02 33 ed 33 c0 3b fb 74 07 8b d7 e8 ?? ?? ?? ff 89 45 00 8b 44 24 20 89 45 08 8b c7 56";
    var npRegisterCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else if (isDemo) {
      npRegisterCommand = new NativePointer('0x0069b610');
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(this.context.edi.readUtf8String());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    // 0x0069a400 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x7a, 0xca,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x2d, 0xed, 0xfc,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b650 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x2a, 0xcb,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x8d, 0x56, 0xfd,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b610 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8c, 0x78, 0x19, 0xa6, 0x78, 0x9b, 0x0d, 0x93, 0x05, 0xf8,
    //   0xe0, 0x1d, 0x98, 0xfa, 0x39, 0xee, 0x36, 0xa2, 0x44, 0x0c,
    //   0x6c, 0x82, 0x34, 0x12, 0xe1, 0x50, 0x27, 0xf3, 0xf1, 0xed,
    //   0x3c, 0xd8, 0xf6, 0x9a, 0xb1, 0x26, 0x06, 0x09, 0x2c, 0xf8,
    //   0xf0, 0x85, 0x77, 0x08, 0xbd, 0x57, 0xce, 0xf4, 0x30, 0xf7,
    //   0x0e, 0x03, 0x68, 0x98, 0x96, 0xf8, 0x8e, 0xd7, 0xe6, 0xaa,
    //   0x6a, 0xef, 0x3d, 0x64
    // };
  },

  ////////////
  // WALL-E //
  ////////////

  "wall-e": () => {
    const walleModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    
    // var nppGlobalCommandState;
    // var nppGlobalCommandStatePattern = "8b 0d ?? ?? ?? ?? 6a 00 68 24 f9 89 00 e8 a5 c7 d6 ff 8b 16 8b 42 48 6a 00 8b ce ff d0 80 be 6c 12 00 00 00 0f 84 81 00 00 00 8b 0d 38 e7 92 00 6a 00 68 24 f9 89 00 e8 7b c7 d6 ff c6 86 f5 13";
    // var nppGlobalCommandStateScanResults = Memory.scanSync(walleModule.base, walleModule.size, nppGlobalCommandStatePattern);
    // if (nppGlobalCommandStateScanResults.length != 0) {
    //   nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
    // } else {
    //   console.log("Could not locate the nppGlobalCommandState. Aborting...");
    //   return;
    // }

    var nppGlobalCommandState = walleModule.base.add(0x0092e738).sub(0x00400000);
    // 0x0092e738 Scene
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x85, 0xc9, 0x74, 0x0c,
    //   0x6a, 0x00, 0x68, 0xd4, 0xbb, 0x7c, 0x00, 0xe8, 0xb2, 0x2a,
    //   0xd9, 0xff, 0x5b, 0xc3, 0x8b, 0x44, 0x24, 0x04, 0x50, 0xe8,
    //   0x56, 0x29, 0xff, 0xff, 0x8b, 0x0d, 0x4c, 0xe7, 0x92, 0x00,
    //   0x85, 0xc9, 0x0f, 0x84, 0xd1, 0x00, 0x00, 0x00, 0x6a, 0x00,
    //   0xe8, 0x51, 0xfc, 0xfc, 0xff, 0x85, 0xc0, 0x0f, 0x84, 0xc2,
    //   0x00, 0x00, 0x00, 0x8b
    // };

    // 0x0092e738 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x6a, 0x00, 0x68, 0x24,
    //   0xf9, 0x89, 0x00, 0xe8, 0xa5, 0xc7, 0xd6, 0xff, 0x8b, 0x16,
    //   0x8b, 0x42, 0x48, 0x6a, 0x00, 0x8b, 0xce, 0xff, 0xd0, 0x80,
    //   0xbe, 0x6c, 0x12, 0x00, 0x00, 0x00, 0x0f, 0x84, 0x81, 0x00,
    //   0x00, 0x00, 0x8b, 0x0d, 0x38, 0xe7, 0x92, 0x00, 0x6a, 0x00,
    //   0x68, 0x24, 0xf9, 0x89, 0x00, 0xe8, 0x7b, 0xc7, 0xd6, 0xff,
    //   0xc6, 0x86, 0xf5, 0x13
    // };

    // 0xXXXXXXX RU.exe
    // 

    // var nfRunCommand;
    // var nfRunCommandPattern = "b8 0c 40 00 00 e8 16 0d 30 00 56 8b f1 57 89 74 24 0c 8d 44 24 14 b9 0f 00 00 00 eb 03 8d 49 00 c6 00 00 05 00 04 00 00 83 e9 01 79 f3 8b bc 24 18 40 00 00 8b c7 8d 50 01 8d a4 24 00 00 00 00";
    // var nfRunCommandScanResults = Memory.scanSync(walleModule.base, walleModule.size, nfRunCommandPattern);
    // if (nfRunCommandScanResults.length != 0) {
    //   nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
    // } else {
    //   console.log("Could not locate the nfRunCommand. Aborting...");
    //   return;
    // }

    var nfRunCommand = new NativeFunction(walleModule.base.add(0x00476580).sub(0x00400000), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x00476580 Scene
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xbf, 0xfe, 0xc1, 0x7f, 0x72, 0x58, 0x98, 0xf9, 0x35, 0xa0,
    //   0x14, 0x1b, 0x28, 0x1e, 0x6c, 0xf5, 0x33, 0x46, 0x10, 0x8a,
    //   0x17, 0xa1, 0x06, 0xa7, 0x90, 0x6c, 0x7f, 0x4c, 0x1d, 0xf6,
    //   0x1c, 0xe2, 0x69, 0x08, 0x2e, 0x2b, 0x90, 0xf3, 0x46, 0xe5,
    //   0xac, 0x3d, 0xe7, 0x53, 0x5a, 0x41, 0x18, 0x1a, 0x1c, 0x61,
    //   0x97, 0x98, 0x54, 0xa8, 0xcb, 0x6f, 0x00, 0x7c, 0xf0, 0xea,
    //   0x12, 0x70, 0xab, 0xe9
    // };

    // 0x00476580 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x40, 0x00, 0x00, 0xe8, 0x16, 0x0d, 0x30, 0x00,
    //   0x56, 0x8b, 0xf1, 0x57, 0x89, 0x74, 0x24, 0x0c, 0x8d, 0x44,
    //   0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xeb, 0x03, 0x8d,
    //   0x49, 0x00, 0xc6, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x00,
    //   0x83, 0xe9, 0x01, 0x79, 0xf3, 0x8b, 0xbc, 0x24, 0x18, 0x40,
    //   0x00, 0x00, 0x8b, 0xc7, 0x8d, 0x50, 0x01, 0x8d, 0xa4, 0x24,
    //   0x00, 0x00, 0x00, 0x00
    // };

    // 0xXXXXXXX RU.exe
    // 

    // var npRegisterCommand;
    // var npRegisterCommandPattern = "83 ec 14 53 55 6a 10 89 4c 24 0c e8 1f 5c 30 00 33 db 83 c4 04 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08 8b e8 eb 02 33 ed 56 57 8b 7c 24 28 3b fb 74 0b 33 d2 8b cf e8 c3 21 fb ff eb 02 33";
    // var npRegisterCommandScanResults = Memory.scanSync(walleModule.base, walleModule.size, npRegisterCommandPattern);
    // if (npRegisterCommandScanResults.length != 0) {
    //   npRegisterCommand = npRegisterCommandScanResults[0].address;
    // } else {
    //   console.log("Could not locate the npRegisterCommand. Aborting...");
    //   return;
    // }

    var npRegisterCommand = walleModule.base.add(0x004763b0).sub(0x00400000);

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readUtf8String());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    // 0xXXXXXXXXX Scene
    //

    // 0x004763b0 RU.dll
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x14, 0x53, 0x55, 0x6a, 0x10, 0x89, 0x4c, 0x24,
    //   0x0c, 0xe8, 0x1f, 0x5c, 0x30, 0x00, 0x33, 0xdb, 0x83, 0xc4,
    //   0x04, 0x3b, 0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04,
    //   0x89, 0x58, 0x0c, 0x89, 0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02,
    //   0x33, 0xed, 0x56, 0x57, 0x8b, 0x7c, 0x24, 0x28, 0x3b, 0xfb,
    //   0x74, 0x0b, 0x33, 0xd2, 0x8b, 0xcf, 0xe8, 0xc3, 0x21, 0xfb,
    //   0xff, 0xeb, 0x02, 0x33
    // };

    // 0xXXXXXXX RU.exe
    // 
  },

  /////////
  // Rat //
  /////////

  "overlay": () => {
    const ratModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }

    var pattern = "b8 0c 44 00 00 e8 d6 8b 0f 00 a1 60 6d 79 00 33 84 24 0c 44 00 00 53 55 89 84 24 10 44 00 00 8b e9 8d 84 24 10 04 00 00 b9 10 00 00 00 8d 49 00 c6 00 00 05 00 04 00 00 49 75 f5 8b 9c 24 18 44";
    var results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
    
    if (results.length != 0 && results[0].address.equals(new NativePointer('0x0052e8b0'))) {
      console.log("Garfield");

      var nppGlobalCommandState = new NativePointer('0x007b2f9c');
      // 0x007b2f9c US EU RU

      var nfRunCommand = new NativeFunction(new NativePointer('0x0052e8b0'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

      global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
      // 0x0052e8b0 US EU RU
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0xb8, 0x0c, 0x44, 0x00, 0x00, 0xe8, 0xd6, 0x8b, 0x0f, 0x00,
      //   0xa1, 0x60, 0x6d, 0x79, 0x00, 0x33, 0x84, 0x24, 0x0c, 0x44,
      //   0x00, 0x00, 0x53, 0x55, 0x89, 0x84, 0x24, 0x10, 0x44, 0x00,
      //   0x00, 0x8b, 0xe9, 0x8d, 0x84, 0x24, 0x10, 0x04, 0x00, 0x00,
      //   0xb9, 0x10, 0x00, 0x00, 0x00, 0x8d, 0x49, 0x00, 0xc6, 0x00,
      //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x49, 0x75, 0xf5, 0x8b,
      //   0x9c, 0x24, 0x18, 0x44
      // };

      var npRegisterCommand = new NativePointer('0x0052e520');

      Interceptor.attach(npRegisterCommand, {
        onEnter: args => {
          commandNames.push(args[0].readUtf8String());
        }
      });

      global.dumpCommandNames = () => { console.log(commandNames); };
      // 0x0052e520 US EU RU
      // #define _BUFFER_SIZE 64
      // const uint8_t buffer[_BUFFER_SIZE] = {
      //   0x83, 0xec, 0x18, 0xa1, 0x60, 0x6d, 0x79, 0x00, 0x33, 0x44,
      //   0x24, 0x18, 0x53, 0x57, 0x6a, 0x1a, 0x68, 0x1c, 0xea, 0x6f,
      //   0x00, 0x68, 0x60, 0x45, 0x6f, 0x00, 0x6a, 0x10, 0x89, 0x44,
      //   0x24, 0x2c, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0xa7, 0x8f, 0xfc,
      //   0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b, 0xc3, 0x74, 0x0f,
      //   0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89, 0x58,
      //   0x08, 0x8b, 0xf8, 0xeb
      // };
    } else {
      pattern = "8b 44 24 08 8b 54 24 04 8b 89 0c 29 00 00 50 52 e8 ab d6 09 00 c2 08 00 90 90 90 90 90 90 90 90 8b 44 24 08 8b 54 24 04 8b 89 0c 29 00 00 50 52 e8 2b d8 09 00 c2 08 00 90 90 90 90 90 90 90 90";
      results = Memory.scanSync(ratModule.base, ratModule.size, pattern);
      
      if (results.length != 0 && results[0].address.equals(new NativePointer('0x0054B420'))) {
        console.log("CT");
  
        var nppGlobalCommandState = new NativePointer('0x00724414');
        // 0x00724414
  
        var nfRunCommand = new NativeFunction(new NativePointer('0x0054B420'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');
  
        global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
        // 0x0054B420
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04, 0x8b, 0x89,
        //   0x0c, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0xab, 0xd6, 0x09,
        //   0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90,
        //   0x90, 0x90, 0x8b, 0x44, 0x24, 0x08, 0x8b, 0x54, 0x24, 0x04,
        //   0x8b, 0x89, 0x0c, 0x29, 0x00, 0x00, 0x50, 0x52, 0xe8, 0x2b,
        //   0xd8, 0x09, 0x00, 0xc2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90,
        //   0x90, 0x90, 0x90, 0x90
        // };
  
        var npRegisterCommand = new NativePointer('0x0054B1C0');
  
        Interceptor.attach(npRegisterCommand, {
          onEnter: args => {
            commandNames.push(args[0].readUtf8String());
          }
        });
  
        global.dumpCommandNames = () => { console.log(commandNames); };
        // 0x0054B1C0
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x14, 0x55, 0x56, 0x6a, 0x1a, 0x68, 0x14, 0x27,
        //   0x70, 0x00, 0x68, 0x64, 0xaf, 0x6f, 0x00, 0x89, 0x4c, 0x24,
        //   0x14, 0x6a, 0x10, 0xe8, 0xc4, 0x13, 0xff, 0xff, 0x33, 0xf6,
        //   0x83, 0xc4, 0x10, 0x3b, 0xc6, 0x74, 0x0f, 0x89, 0x30, 0x89,
        //   0x70, 0x04, 0x89, 0x70, 0x0c, 0x89, 0x70, 0x08, 0x8b, 0xe8,
        //   0xeb, 0x02, 0x33, 0xed, 0x53, 0x8b, 0x5c, 0x24, 0x24, 0x3b,
        //   0xde, 0x74, 0x0c, 0x56
        // };
      } else {
        console.log("Ratatat");

        var isRU = false; // russian version

        var nppGlobalCommandState;
        var nppGlobalCommandStatePattern = "8b 0d ?? ?? ?? ?? 6a 00 68 ?? ?? 72 00 c6 05 ?? ?? ?? 00 00 e8 ?? ?? ?? ff 83 05 ?? ?? ?? 00 01 80 3d ?? ?? ?? 00 00 75 f7 e8 ?? a6 ff ff e8 ?? ?? 09 00 84 c0 74 e9 e8 ?? e8 ff ff b0 01 c3 cc";
        var nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
        if (nppGlobalCommandStateScanResults.length != 0) {
          nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(2).readPointer();
        } else {
          nppGlobalCommandStatePattern = "8b 0d b8 12 78 00 6a 00 68 20 91 6f 00 c6 05 78 22 78 00 00 e8 0c 32 fe ff ff 05 6c 22 78 00 8d 9b 00 00 00 00 a0 a8 3b 79 00 84 c0 75 f7 e8 32 ae ff ff e8 bd 85 fb ff 84 c0 74 e9 e8 e4 e8 ff";
          nppGlobalCommandStateScanResults = Memory.scanSync(ratModule.base, ratModule.size, nppGlobalCommandStatePattern);
          if (nppGlobalCommandStateScanResults.length != 0) {
            nppGlobalCommandState = new NativePointer('0x007812b8');
            isRU = true;
          } else {
            console.log("Could not locate the nppGlobalCommandState. Aborting...");
            return;
          }
        }
        // Aggregate
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, ??, ??, ??, ??, 0x6a, 0x00, 0x68, ??,
        //   ??, 0x72, 0x00, 0xc6, 0x05, ??, ??, ??, 0x00, 0x00,
        //   0xe8, ??, ??, ??, 0xff, 0x83, 0x05, ??, ??, ??,
        //   0x00, 0x01, 0x80, 0x3d, ??, ??, ??, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, ??, 0xa6, 0xff, 0xff, 0xe8, ??, ??, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, ??, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007de8a0 US
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0xa0, 0xe8, 0x7d, 0x00, 0x6a, 0x00, 0x68, 0xd8,
        //   0x9f, 0x72, 0x00, 0xc6, 0x05, 0x60, 0xf9, 0x7d, 0x00, 0x00,
        //   0xe8, 0x0c, 0x05, 0xfe, 0xff, 0x83, 0x05, 0x54, 0xf9, 0x7d,
        //   0x00, 0x01, 0x80, 0x3d, 0xf8, 0xc7, 0x7d, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x77, 0xa6, 0xff, 0xff, 0xe8, 0xa2, 0x20, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x39, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007e2d00 GR/ES
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0x00, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xfc,
        //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0xc0, 0x3d, 0x7e, 0x00, 0x00,
        //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xb4, 0x3d, 0x7e,
        //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0xc2, 0x38, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007e2d48 SC
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0x48, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xfc,
        //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0x08, 0x3e, 0x7e, 0x00, 0x00,
        //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xfc, 0x3d, 0x7e,
        //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x02, 0x39, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007dd8a0 US 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0xa0, 0xd8, 0x7d, 0x00, 0x6a, 0x00, 0x68, 0xc8,
        //   0x8f, 0x72, 0x00, 0xc6, 0x05, 0x60, 0xe9, 0x7d, 0x00, 0x00,
        //   0xe8, 0x0c, 0x05, 0xfe, 0xff, 0x83, 0x05, 0x54, 0xe9, 0x7d,
        //   0x00, 0x01, 0x80, 0x3d, 0xf8, 0xb7, 0x7d, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x77, 0xa6, 0xff, 0xff, 0xe8, 0x12, 0x20, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x39, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007e2d00 GR/ES 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0x00, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xec,
        //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0xc0, 0x3d, 0x7e, 0x00, 0x00,
        //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xb4, 0x3d, 0x7e,
        //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x32, 0x38, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007e2d48 SC 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0x48, 0x2d, 0x7e, 0x00, 0x6a, 0x00, 0x68, 0xec,
        //   0xbd, 0x72, 0x00, 0xc6, 0x05, 0x08, 0x3e, 0x7e, 0x00, 0x00,
        //   0xe8, 0x4c, 0xff, 0xfd, 0xff, 0x83, 0x05, 0xfc, 0x3d, 0x7e,
        //   0x00, 0x01, 0x80, 0x3d, 0x98, 0x09, 0x7e, 0x00, 0x00, 0x75,
        //   0xf7, 0xe8, 0x87, 0xa6, 0xff, 0xff, 0xe8, 0x72, 0x38, 0x09,
        //   0x00, 0x84, 0xc0, 0x74, 0xe9, 0xe8, 0x49, 0xe8, 0xff, 0xff,
        //   0xb0, 0x01, 0xc3, 0xcc
        // };

        // 0x007812b8 RU.dll
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x8b, 0x0d, 0xb8, 0x12, 0x78, 0x00, 0x6a, 0x00, 0x68, 0x20,
        //   0x91, 0x6f, 0x00, 0xc6, 0x05, 0x78, 0x22, 0x78, 0x00, 0x00,
        //   0xe8, 0x0c, 0x32, 0xfe, 0xff, 0xff, 0x05, 0x6c, 0x22, 0x78,
        //   0x00, 0x8d, 0x9b, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa8, 0x3b,
        //   0x79, 0x00, 0x84, 0xc0, 0x75, 0xf7, 0xe8, 0x32, 0xae, 0xff,
        //   0xff, 0xe8, 0xbd, 0x85, 0xfb, 0xff, 0x84, 0xc0, 0x74, 0xe9,
        //   0xe8, 0xe4, 0xe8, 0xff
        // };

        var nfRunCommand;
        var nfRunCommandPattern = "b8 10 40 00 00 e8 ?? ?? ?? 00 a1 ?? ?? 7c 00 33 c4 89 84 24 0c 40 00 00 55 57 8b bc 24 1c 40 00 00 8b e9 89 7c 24 08 8d 44 24 14 b9 0f 00 00 00 c6 00 00 05 00 04 00 00 83 e9 01 79 f3 8b c7 8d";
        var nfRunCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, nfRunCommandPattern);
        if (nfRunCommandScanResults.length != 0) {
          nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'thiscall');
        } else if (isRU) {
          nfRunCommand = new NativeFunction(new NativePointer('0x005a0c50'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');
        } else {
          console.log("Could not locate the nfRunCommand. Aborting...");
          return;
        }

        global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
        // Aggregate
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, ??, ??, ??, 0x00,
        //   0xa1, ??, ??, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a6e20 US
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x26, 0xf4, 0x10, 0x00,
        //   0xa1, 0x38, 0x3f, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a7ac0 GR/ES
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x76, 0x14, 0x11, 0x00,
        //   0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a7ac0 SC
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0xb6, 0x14, 0x11, 0x00,
        //   0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a6e20 US 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0xf6, 0xeb, 0x10, 0x00,
        //   0xa1, 0x38, 0x2f, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a7950 GR/ES 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x46, 0x0c, 0x11, 0x00,
        //   0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a7ac0 SC 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x10, 0x40, 0x00, 0x00, 0xe8, 0x86, 0x0c, 0x11, 0x00,
        //   0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4, 0x89, 0x84, 0x24,
        //   0x0c, 0x40, 0x00, 0x00, 0x55, 0x57, 0x8b, 0xbc, 0x24, 0x1c,
        //   0x40, 0x00, 0x00, 0x8b, 0xe9, 0x89, 0x7c, 0x24, 0x08, 0x8d,
        //   0x44, 0x24, 0x14, 0xb9, 0x0f, 0x00, 0x00, 0x00, 0xc6, 0x00,
        //   0x00, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79,
        //   0xf3, 0x8b, 0xc7, 0x8d
        // };

        // 0x005a0c50 RU.dll
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0xb8, 0x0c, 0x40, 0x00, 0x00, 0xe8, 0xc6, 0x7a, 0x10, 0x00,
        //   0x53, 0x55, 0x8b, 0xe9, 0x8d, 0x44, 0x24, 0x14, 0xb9, 0x10,
        //   0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
        //   0x00, 0x49, 0x75, 0xf5, 0x8b, 0x9c, 0x24, 0x18, 0x40, 0x00,
        //   0x00, 0x8b, 0xc3, 0x8d, 0x50, 0x01, 0x8b, 0xff, 0x8a, 0x08,
        //   0x40, 0x84, 0xc9, 0x75, 0xf9, 0x2b, 0xc2, 0x89, 0x44, 0x24,
        //   0x10, 0x75, 0x0d, 0x5d
        // };

        var npRegisterCommand;
        var npRegisterCommandPattern = "83 ec 18 a1 ?? ?? 7c 00 33 c4 89 44 24 14 53 55 8b 6c 24 24 57 6a 1a 68 ?? ?? 72 00 68 ?? ?? ?? 00 6a 10 89 4c 24 1c e8 ?? ?? fc ff 33 db 83 c4 10 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08";
        var npRegisterCommandScanResults = Memory.scanSync(ratModule.base, ratModule.size, npRegisterCommandPattern);
        if (npRegisterCommandScanResults.length != 0) {
          npRegisterCommand = npRegisterCommandScanResults[0].address;
        } else if (isRU) {
          npRegisterCommand = new NativePointer('0x005a08a0');
        } else {
          console.log("Could not locate the npRegisterCommand. Aborting...");
          return;
        }

        Interceptor.attach(npRegisterCommand, {
          onEnter: args => {
            commandNames.push(args[0].readUtf8String());
          }
        });

        global.dumpCommandNames = () => { console.log(commandNames); };
        // Aggregate
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, ??, ??, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, ??, ??, 0x72, 0x00, 0x68, ??,
        //   ??, ??,, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   ??, ??, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a6a70 US
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0x38, 0x3f, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0x68, 0x7d, 0x72, 0x00, 0x68, 0x2c,
        //   0x0c, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0xa4, 0x57, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a7710 GR/ES
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0xc4, 0x9b, 0x72, 0x00, 0x68, 0xe4,
        //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a7710 SC
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0xf8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0xc4, 0x9b, 0x72, 0x00, 0x68, 0xe4,
        //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a6a70 US 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0x38, 0x2f, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0x58, 0x6d, 0x72, 0x00, 0x68, 0x1c,
        //   0xfc, 0x70, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0xa4, 0x57, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a75a0 GR/ES 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0xb4, 0x9b, 0x72, 0x00, 0x68, 0xd4,
        //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a7710 SC 2k
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0xe8, 0x80, 0x7c, 0x00, 0x33, 0xc4,
        //   0x89, 0x44, 0x24, 0x14, 0x53, 0x55, 0x8b, 0x6c, 0x24, 0x24,
        //   0x57, 0x6a, 0x1a, 0x68, 0xb4, 0x9b, 0x72, 0x00, 0x68, 0xd4,
        //   0x2b, 0x71, 0x00, 0x6a, 0x10, 0x89, 0x4c, 0x24, 0x1c, 0xe8,
        //   0x64, 0x55, 0xfc, 0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b,
        //   0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58,
        //   0x0c, 0x89, 0x58, 0x08
        // };

        // 0x005a08a0 RU.dll
        // #define _BUFFER_SIZE 64
        // const uint8_t buffer[_BUFFER_SIZE] = {
        //   0x83, 0xec, 0x18, 0xa1, 0xbc, 0xa7, 0x77, 0x00, 0x33, 0x44,
        //   0x24, 0x18, 0x53, 0x57, 0x6a, 0x1a, 0x68, 0x48, 0x71, 0x6f,
        //   0x00, 0x68, 0x2c, 0xf6, 0x6d, 0x00, 0x6a, 0x10, 0x89, 0x44,
        //   0x24, 0x2c, 0x89, 0x4c, 0x24, 0x18, 0xe8, 0x27, 0x2f, 0xfc,
        //   0xff, 0x33, 0xdb, 0x83, 0xc4, 0x10, 0x3b, 0xc3, 0x74, 0x0f,
        //   0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89, 0x58,
        //   0x08, 0x8b, 0xf8, 0xeb
        // };
      }
    }
  },

  "overlay_win2k": () => { games["overlay"](); },

  "up": () => {
    const upModule = Process.enumerateModules()[0];

    for (const module of Process.enumerateModules()) {
      Memory.protect(module.base, module.size, "rwx");
    }
    
    var nppGlobalCommandState;
    
    var pattern = "8b 0d c8 cc a7 00 6a 00 d9 1d b0 df a7 00 68 5c 78 9e 00 c6 05 b8 df a7 00 00 e8 da 9c f9 ff 83 05 a8 df a7 00 01 80 3d 88 7c a6 00 00 75 f7 e8 b5 f9 ff ff e8 b0 60 17 00 84 c0 74 e9 e8 f7 08";
    var results = Memory.scanSync(upModule.base, upModule.size, pattern);
    
    if (results.length != 0 && results[0].address.equals(new NativePointer('0x00482387'))) {
      console.log("UP RU");
      nppGlobalCommandState = new NativePointer('0x00a7ccc8');
    } else {
      console.log("UP US");
      nppGlobalCommandState = new NativePointer('0x00a7ccb0');
    }
    // 0x00a7ccb0 US
    // 

    // 0x00a7ccc8 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8b, 0x0d, 0xc8, 0xcc, 0xa7, 0x00, 0x6a, 0x00, 0xd9, 0x1d,
    //   0xb0, 0xdf, 0xa7, 0x00, 0x68, 0x5c, 0x78, 0x9e, 0x00, 0xc6,
    //   0x05, 0xb8, 0xdf, 0xa7, 0x00, 0x00, 0xe8, 0xda, 0x9c, 0xf9,
    //   0xff, 0x83, 0x05, 0xa8, 0xdf, 0xa7, 0x00, 0x01, 0x80, 0x3d,
    //   0x88, 0x7c, 0xa6, 0x00, 0x00, 0x75, 0xf7, 0xe8, 0xb5, 0xf9,
    //   0xff, 0xff, 0xe8, 0xb0, 0x60, 0x17, 0x00, 0x84, 0xc0, 0x74,
    //   0xe9, 0xe8, 0xf7, 0x08
    // };

    var nfRunCommand = new NativeFunction(new NativePointer('0x0041c080'), "bool", ["pointer", "pointer", "uint32"], 'thiscall');

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x0041c080 US
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x58, 0xfc, 0x85, 0x3b, 0x81, 0xe4, 0x56, 0xb5, 0x3c, 0x18,
    //   0xf9, 0xb7, 0x33, 0xcc, 0xf3, 0xad, 0x38, 0x6e, 0x4a, 0x12,
    //   0xb4, 0x62, 0x8d, 0x90, 0x5c, 0x20, 0x95, 0x97, 0xa7, 0xa3,
    //   0x20, 0x7a, 0x19, 0x0b, 0x5e, 0x9e, 0x09, 0xf3, 0x7e, 0x30,
    //   0x2d, 0x57, 0xd7, 0x6e, 0xa9, 0x61, 0x31, 0x60, 0xb5, 0x93,
    //   0x5b, 0xdf, 0x86, 0x7c, 0x13, 0x09, 0x2b, 0x91, 0x22, 0x1a,
    //   0x56, 0x7c, 0xb7, 0x15
    // };

    // 0x0041c080 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x66, 0x27, 0x48, 0x00,
    //   0x53, 0x56, 0x57, 0x8b, 0xf9, 0x89, 0x7c, 0x24, 0x10, 0x8d,
    //   0x44, 0x24, 0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb,
    //   0x8b, 0xff, 0x88, 0x18, 0x05, 0x00, 0x04, 0x00, 0x00, 0x83,
    //   0xe9, 0x01, 0x79, 0xf4, 0x8b, 0x94, 0x24, 0x1c, 0x80, 0x00,
    //   0x00, 0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0,
    //   0x01, 0x84, 0xc9, 0x75
    // };

    var npRegisterCommand = new NativePointer('0x0041bec0');

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readUtf8String());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    // 0x0041bec0 US
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xa3, 0x4d, 0x8b, 0x33, 0xdc, 0xec, 0x4b, 0xec, 0xef, 0x7a,
    //   0x65, 0xa9, 0xed, 0x64, 0x3f, 0xb2, 0xba, 0xc6, 0x8e, 0x6c,
    //   0x56, 0x32, 0x72, 0xbf, 0x8b, 0xcc, 0xb2, 0x95, 0xd4, 0x71,
    //   0xf1, 0xf6, 0xad, 0xa9, 0x8e, 0xdd, 0x70, 0x6f, 0xc7, 0x4f,
    //   0x9f, 0x84, 0xc1, 0xfd, 0xe9, 0x37, 0x4c, 0xdc, 0x8e, 0x12,
    //   0xc3, 0xe3, 0xb0, 0xc5, 0x9f, 0xdb, 0x2f, 0x67, 0xee, 0x9b,
    //   0x8a, 0x89, 0x8d, 0x31
    // };

    // 0x0041bec0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x14, 0x53, 0x55, 0x6a, 0x10, 0x89, 0x4c, 0x24,
    //   0x0c, 0xe8, 0x4c, 0x7b, 0x48, 0x00, 0x33, 0xdb, 0x83, 0xc4,
    //   0x04, 0x3b, 0xc3, 0x74, 0x0f, 0x89, 0x18, 0x89, 0x58, 0x04,
    //   0x89, 0x58, 0x0c, 0x89, 0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02,
    //   0x33, 0xed, 0x56, 0x57, 0x8b, 0x7c, 0x24, 0x28, 0x3b, 0xfb,
    //   0x74, 0x0b, 0x33, 0xd2, 0x8b, 0xcf, 0xe8, 0x63, 0x0c, 0x01,
    //   0x00, 0xeb, 0x02, 0x33
    // };
  }
};

var gameSetup = games[Process.enumerateModules()[0].name.toLowerCase().split('.')[0]];

if (gameSetup) {
  gameSetup();
} else {
  console.log("Unknown executable name. Unable to instrument.");
}
