var commandNames = [];

const games = {
  "FUEL.exe": () => {
    const fuelModule = Process.enumerateModules()[0];
    Memory.protect(fuelModule.base, fuelModule.size, "rwx");
    var isDemo = false;
    
    var nppGlobalCommandState;
    var nppGlobalCommandStatePattern = "a1 ?? ?? ?? ?? d9 05 ?? ?? 9d 00 6a 00 d9 1d ?? ?? a7 00 68 ?? ?? 9c 00 50 c6 05 ?? ?? a7 00 00 e8 3a 13 01 00 83 05 ?? ?? a7 00 01 80 3d 79 ?? a6 00 00 75 f7 e8 85 f9 ff ff e8 ?? 71 19 00 84 c0";
    var nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
    if (nppGlobalCommandStateScanResults.length != 0) {
      nppGlobalCommandState = nppGlobalCommandStateScanResults[0].address.add(1).readPointer();
    } else {
      nppGlobalCommandStatePattern = "e0 54 a7 00 68 c0 dc 81 00 52 bf e4 13 9d 00 e8 98 c0 e7 ff e8 73 ae e6 ff 88 44 24 0f 6a 00 68 60 62 9f 00 6a 08 6a 3b ff d6 6a 00 68 68 62 9f 00 6a 08 6a 35 ff d6 6a 00 68 70 62 9f 00 6a 18";
      nppGlobalCommandStateScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nppGlobalCommandStatePattern);
      if (nppGlobalCommandStateScanResults.length != 0) {
        nppGlobalCommandState = new NativePointer('0x00a754e0');
        isDemo = true;
      } else {
        console.log("Could not locate the nppGlobalCommandState. Aborting...");
        return;
      }
    }
    // 0x00a7c080 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x80, 0xc0, 0xa7, 0x00, 0xd9, 0x05, 0x18, 0xc0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x68, 0xd3, 0xa7, 0x00, 0x68, 0x78,
    //   0x81, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x70, 0xd3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x60, 0xd3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x58, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xb0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a7e088 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x88, 0xe0, 0xa7, 0x00, 0xd9, 0x05, 0xa8, 0xe0, 0x9d, 0x00,
    //   0x6a, 0x00, 0xd9, 0x1d, 0x70, 0xf3, 0xa7, 0x00, 0x68, 0x08,
    //   0xa2, 0x9c, 0x00, 0x50, 0xc6, 0x05, 0x78, 0xf3, 0xa7, 0x00,
    //   0x00, 0xe8, 0x3a, 0x13, 0x01, 0x00, 0x83, 0x05, 0x68, 0xf3,
    //   0xa7, 0x00, 0x01, 0x80, 0x3d, 0x79, 0x78, 0xa6, 0x00, 0x00,
    //   0x75, 0xf7, 0xe8, 0x85, 0xf9, 0xff, 0xff, 0xe8, 0xc0, 0x71,
    //   0x19, 0x00, 0x84, 0xc0
    // };

    // 0x00a754e0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xe0, 0x54, 0xa7, 0x00, 0x68, 0xc0, 0xdc, 0x81, 0x00, 0x52,
    //   0xbf, 0xe4, 0x13, 0x9d, 0x00, 0xe8, 0x98, 0xc0, 0xe7, 0xff,
    //   0xe8, 0x73, 0xae, 0xe6, 0xff, 0x88, 0x44, 0x24, 0x0f, 0x6a,
    //   0x00, 0x68, 0x60, 0x62, 0x9f, 0x00, 0x6a, 0x08, 0x6a, 0x3b,
    //   0xff, 0xd6, 0x6a, 0x00, 0x68, 0x68, 0x62, 0x9f, 0x00, 0x6a,
    //   0x08, 0x6a, 0x35, 0xff, 0xd6, 0x6a, 0x00, 0x68, 0x70, 0x62,
    //   0x9f, 0x00, 0x6a, 0x18
    // };

    var nfRunCommand;
    var nfRunCommandPattern = "b8 0c 80 00 00 e8 ?? ?? 21 00 8b 94 24 14 80 00 00 53 56 57 8b bc 24 1c 80 00 00 8d 44 24 18 b9 1f 00 00 00 33 db 88 18 05 00 04 00 00 83 e9 01 79 f4 8b c2 8d 70 01 8a 08 83 c0 01 84 c9 75 f7";
    var nfRunCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, nfRunCommandPattern);
    if (nfRunCommandScanResults.length != 0) {
      nfRunCommand = new NativeFunction(nfRunCommandScanResults[0].address, "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else if (isDemo) {
      nfRunCommand = new NativeFunction(new NativePointer('0x0069b7a0'), "bool", ["pointer", "pointer", "uint32"], 'stdcall');
    } else {
      console.log("Could not locate the nfRunCommand. Aborting...");
      return;
    }

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) };
    // 0x0069a590 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x56, 0xd8, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7e0 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0xb8, 0x0c, 0x80, 0x00, 0x00, 0xe8, 0x06, 0xd9, 0x21, 0x00,
    //   0x8b, 0x94, 0x24, 0x14, 0x80, 0x00, 0x00, 0x53, 0x56, 0x57,
    //   0x8b, 0xbc, 0x24, 0x1c, 0x80, 0x00, 0x00, 0x8d, 0x44, 0x24,
    //   0x18, 0xb9, 0x1f, 0x00, 0x00, 0x00, 0x33, 0xdb, 0x88, 0x18,
    //   0x05, 0x00, 0x04, 0x00, 0x00, 0x83, 0xe9, 0x01, 0x79, 0xf4,
    //   0x8b, 0xc2, 0x8d, 0x70, 0x01, 0x8a, 0x08, 0x83, 0xc0, 0x01,
    //   0x84, 0xc9, 0x75, 0xf7
    // };

    // 0x0069b7a0 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x0f, 0x22, 0xdf, 0x83, 0xa4, 0xfa, 0x82, 0x85, 0x39, 0x55,
    //   0x4e, 0xe2, 0xb7, 0x56, 0x1d, 0xd5, 0xf4, 0x64, 0x2a, 0x34,
    //   0xc6, 0x29, 0x1f, 0x05, 0x80, 0xaa, 0x09, 0x1c, 0xf8, 0x13,
    //   0x16, 0xb5, 0x9d, 0x1f, 0x36, 0xba, 0x8a, 0xc1, 0x1e, 0x6b,
    //   0x21, 0x1b, 0xe1, 0x12, 0xa2, 0x77, 0x48, 0x1c, 0x78, 0x35,
    //   0xfa, 0xf7, 0xf2, 0xd7, 0xfb, 0x42, 0x6c, 0x35, 0x14, 0xdb,
    //   0x84, 0xb9, 0x40, 0x6b
    // };

    var npRegisterCommand;
    var npRegisterCommandPattern = "83 ec 10 53 55 6a 10 e8 ?? ?? 21 00 33 db 83 c4 04 3b c3 74 0f 89 18 89 58 04 89 58 0c 89 58 08 8b e8 eb 02 33 ed 33 c0 3b fb 74 07 8b d7 e8 ?? ?? ?? ff 89 45 00 8b 44 24 20 89 45 08 8b c7 56";
    var npRegisterCommandScanResults = Memory.scanSync(fuelModule.base, fuelModule.size, npRegisterCommandPattern);
    if (npRegisterCommandScanResults.length != 0) {
      npRegisterCommand = npRegisterCommandScanResults[0].address;
    } else if (isDemo) {
      npRegisterCommand = new NativePointer('0x0069b610');
    } else {
      console.log("Could not locate the npRegisterCommand. Aborting...");
      return;
    }

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(this.context.edi.readUtf8String());
      }
    });

    global.dumpCommandNames = () => { console.log(commandNames); };
    // 0x0069a400 EN
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x7a, 0xca,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x2d, 0xed, 0xfc,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b650 RU
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x83, 0xec, 0x10, 0x53, 0x55, 0x6a, 0x10, 0xe8, 0x2a, 0xcb,
    //   0x21, 0x00, 0x33, 0xdb, 0x83, 0xc4, 0x04, 0x3b, 0xc3, 0x74,
    //   0x0f, 0x89, 0x18, 0x89, 0x58, 0x04, 0x89, 0x58, 0x0c, 0x89,
    //   0x58, 0x08, 0x8b, 0xe8, 0xeb, 0x02, 0x33, 0xed, 0x33, 0xc0,
    //   0x3b, 0xfb, 0x74, 0x07, 0x8b, 0xd7, 0xe8, 0x8d, 0x56, 0xfd,
    //   0xff, 0x89, 0x45, 0x00, 0x8b, 0x44, 0x24, 0x20, 0x89, 0x45,
    //   0x08, 0x8b, 0xc7, 0x56
    // };

    // 0x0069b610 Demo
    // #define _BUFFER_SIZE 64
    // const uint8_t buffer[_BUFFER_SIZE] = {
    //   0x8c, 0x78, 0x19, 0xa6, 0x78, 0x9b, 0x0d, 0x93, 0x05, 0xf8,
    //   0xe0, 0x1d, 0x98, 0xfa, 0x39, 0xee, 0x36, 0xa2, 0x44, 0x0c,
    //   0x6c, 0x82, 0x34, 0x12, 0xe1, 0x50, 0x27, 0xf3, 0xf1, 0xed,
    //   0x3c, 0xd8, 0xf6, 0x9a, 0xb1, 0x26, 0x06, 0x09, 0x2c, 0xf8,
    //   0xf0, 0x85, 0x77, 0x08, 0xbd, 0x57, 0xce, 0xf4, 0x30, 0xf7,
    //   0x0e, 0x03, 0x68, 0x98, 0x96, 0xf8, 0x8e, 0xd7, 0xe6, 0xaa,
    //   0x6a, 0xef, 0x3d, 0x64
    // };
  },
  "WALL-E.exe": () => {
    const nppGlobalCommandState = new NativePointer("0x0092e738");
    const nfRunCommand = new NativeFunction(new NativePointer("0x004546b0"), "bool", ["pointer", "pointer"], 'stdcall');
    const npRegisterCommand = new NativePointer("0x00476580");

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd)) },

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readUtf8String());
      }
    });
    
    global.dumpCommandNames = () => { console.log(commandNames); };
  },
  "overlay.exe": () => {
    const nppGlobalCommandState = new NativePointer("0x007de8a0");
    const nfRunCommand = new NativeFunction(new NativePointer("0x005a6e20"), "bool", ["pointer", "pointer", "uint32"], 'thiscall');
    const npRegisterCommand = new NativePointer("0x005a6a70");

    global.runCommand = cmd => { nfRunCommand(nppGlobalCommandState.readPointer(), Memory.allocUtf8String(cmd), 0) },

    Interceptor.attach(npRegisterCommand, {
      onEnter: args => {
        commandNames.push(args[0].readUtf8String());
      }
    });
    
    global.dumpCommandNames = () => { console.log(commandNames); };
  }
};

var gameSetup = games[Process.enumerateModules()[0].name];

if (gameSetup) {
  gameSetup();
} else {
  console.log("Unknown executable name. Unable to instrument.");
}
